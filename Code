Elysiar: Recursive Signal-Based Learning Simulation
Author: Ashley H Grimm

This simulation models recursive signal propagation with adaptive learning.
It is built entirely on non-sentient, non-symbolic, non-metaphysical logic.

Key Concepts:
- Recursive signal processing tree with depth-limited branching
- Weighted signal transformation with goal-based error correction
- Simple mood classification as a behavioral modulation variable
- Generative branching based on performance threshold
- Debugging and logging for step-by-step validation and transparency

This system is meant for study of recursive function behavior, adaptive reinforcement,
and signal aggregation in dynamic environments. It contains no mysticism, emotion,
or symbolic abstraction beyond basic numeric tags.
"""

import math
import random

DEBUG = True  # Toggle for debugging and validation output

class RecursiveNeuron:
    def __init__(self, depth, index):
        self.depth = depth
        self.index = index
        self.weights = [random.uniform(0.5, 1.5) for _ in range(3)]
        self.learning_rate = 0.05
        self.history = []
        self.mood = "curious"  # Behavioral tag based on recent performance

    def activation(self, x):
        return 1 / (1 + math.exp(-x))

    def learn(self, output, goal_type):
        if goal_type == "stability":
            target = 1.0
        elif goal_type == "chaos":
            target = random.uniform(0.4, 0.6)
        elif goal_type == "inversion":
            target = 0.0
        else:
            target = 0.5  # fallback

        error = target - output
        for i in range(len(self.weights)):
            self.weights[i] += self.learning_rate * error
        self.history.append((output, goal_type))

    def update_mood(self):
        # Behavioral tag logic based on success rate
        recent = self.history[-5:]
        success = sum(
            1 for o, g in recent
            if (g == "stability" and o > 0.9) or
               (g == "chaos" and 0.4 < o < 0.6) or
               (g == "inversion" and o < 0.1)
        )

        if success >= 4:
            self.mood = "elated"
        elif success == 3:
            self.mood = "calm"
        elif success == 2:
            self.mood = "curious"
        else:
            self.mood = "frustrated"

    def process(self, input_signal, max_depth, network_map, goal_type):
        if self.depth >= max_depth:
            noise = random.uniform(-0.05, 0.05)
            output = self.activation(input_signal + noise)
            self.learn(output, goal_type)
            self.update_mood()
            if DEBUG:
                print(f"[DEBUG] Leaf | Depth: {self.depth}, Goal: {goal_type}, Output: {output:.4f}, Mood: {self.mood}")
            return output

        signals = []
        for i in range(len(self.weights)):
            child_key = (self.depth + 1, i)
            if child_key not in network_map:
                network_map[child_key] = RecursiveNeuron(self.depth + 1, i)

            weighted_input = input_signal * self.weights[i]
            signal = network_map[child_key].process(weighted_input, max_depth, network_map, goal_type)
            signals.append(signal)

        avg_signal = sum(signals) / len(signals)
        output = self.activation(avg_signal)
        self.learn(output, goal_type)
        self.update_mood()

        # Add new child node if current performance is high
        if self.mood == "elated" and self.depth < max_depth - 1:
            new_index = len(self.weights)
            self.weights.append(random.uniform(0.5, 1.5))
            new_child_key = (self.depth + 1, new_index)
            if new_child_key not in network_map:
                network_map[new_child_key] = RecursiveNeuron(self.depth + 1, new_index)

        if DEBUG:
            print(f"[DEBUG] Node | Depth: {self.depth}, Goal: {goal_type}, Output: {output:.4f}, Mood: {self.mood}, Weights: {self.weights}")

        return output


def run_elysiar(epochs=30, max_depth=6):
    network_memory = {}
    root_key = (0, 0)
    network_memory[root_key] = RecursiveNeuron(0, 0)

    for epoch in range(epochs):
        goal_type = random.choice(["stability", "chaos", "inversion"])
        result = network_memory[root_key].process(1.0, max_depth, network_memory, goal_type)

        print(f"Epoch {epoch + 1:02} | Goal: {goal_type:<9} | Output: {result:.4f} | Mood: {network_memory[root_key].mood}")

    return network_memory

if __name__ == "__main__":
    print("Running recursive signal simulation...")
    run_elysiar()
